{"version":3,"sources":["Components/Section/Section.js","Components/Title/Title.js","Components/Button/Button.js","Components/Statistics/Statistics.js","Components/Notification/Notification.js","Components/Feedback/Feedback.js","App.js","index.js"],"names":["Section","children","className","Title","message","Button","callback","options","map","option","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","Fedback","state","normal","buttonIncrement","setState","prevtState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","App","ReactDOM","render","document","getElementById"],"mappings":"4SAKeA,EAHC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,yBAASC,UAAU,YAAnB,SAAgCD,KCKnBE,G,MAJD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,oBAAIF,UAAU,gBAAd,SAA+BE,MCkB/CC,G,MAlBA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,QAAb,OACb,qBAAKL,UAAU,cAAf,SACGK,EAAQC,KAAI,SAACC,GAAD,OACX,wBACEP,UAAU,cACVQ,KAAK,SACLC,QAAS,kBAAML,EAASG,IAH1B,SAMGA,GAFIA,UCcEG,G,MArBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,8BACE,+BACE,qBAAIf,UAAU,kBAAd,kBAAsCW,KACtC,qBAAIX,UAAU,kBAAd,qBAAyCY,KACzC,qBAAIZ,UAAU,kBAAd,iBAAqCa,KACrC,qBAAIb,UAAU,kBAAd,mBAAuCc,KACvC,qBAAId,UAAU,kBAAd,+BACqBe,EADrB,cCASC,G,MAPM,SAAC,GAAD,IAAGd,EAAH,EAAGA,QAAH,OACnB,mBAAGF,UAAU,uBAAb,SAAqCE,MCwDxBe,E,4MArDbC,MAAQ,CACNP,KAAM,EACNC,QAAS,EACTC,IAAK,EACLM,OAAQ,G,EAEVC,gBAAkB,SAACb,GACjB,EAAKc,UAAS,SAACC,GAAD,sBACXf,EAASe,EAAWf,GAAU,MAEjC,EAAKgB,qBACL,EAAKC,mC,EAEPD,mBAAqB,WACnB,EAAKF,UAAS,SAACC,GAAD,MAAiB,CAC7BR,MAAOQ,EAAWX,KAAOW,EAAWV,QAAUU,EAAWT,S,EAG7DW,gCAAkC,WAChC,EAAKH,UAAS,SAACC,GAAD,MAAiB,CAC7BP,mBAAoBU,KAAKC,MACtBJ,EAAWX,KAAOW,EAAWR,MAAS,U,4CAK7C,WACE,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAAOZ,QAAQ,0BACf,cAAC,EAAD,CACEE,SAAUuB,KAAKP,gBACff,QAAS,CAAC,OAAQ,UAAW,SAE/B,4CACqB,IAApBsB,KAAKT,MAAMP,MACO,IAAnBgB,KAAKT,MAAML,KACY,IAAvBc,KAAKT,MAAMN,QACT,cAAC,EAAD,CAAcV,QAAQ,sBAEtB,cAAC,EAAD,CACES,KAAMgB,KAAKT,MAAMP,KACjBC,QAASe,KAAKT,MAAMN,QACpBC,IAAKc,KAAKT,MAAML,IAChBC,MAAOa,KAAKT,MAAMJ,MAClBC,mBAAoBY,KAAKT,MAAMH,4B,GA9CrBa,aCHPC,EADH,kBAAM,cAAC,EAAD,KCkBlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d5a02fc6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Section = ({ children }) => (\r\n  <section className=\"container\">{children}</section>\r\n);\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Title.css\";\r\n\r\nconst Title = ({ message }) => <h1 className=\"title-massage\">{message}</h1>;\r\nTitle.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\nexport default Title;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Button.css\";\r\n\r\nconst Button = ({ callback, options }) => (\r\n  <div className=\"button-list\">\r\n    {options.map((option) => (\r\n      <button\r\n        className=\"button-item\"\r\n        type=\"button\"\r\n        onClick={() => callback(option)}\r\n        key={option}\r\n      >\r\n        {option}\r\n      </button>\r\n    ))}\r\n  </div>\r\n);\r\nButton.propTypes = {\r\n  callback: PropTypes.func.isRequired,\r\n  options: PropTypes.array.isRequired,\r\n};\r\nexport default Button;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Statistics.css\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <div>\r\n    <ul>\r\n      <li className=\"statistics-item\">Good:{good}</li>\r\n      <li className=\"statistics-item\">Neutral:{neutral}</li>\r\n      <li className=\"statistics-item\">Bad:{bad}</li>\r\n      <li className=\"statistics-item\">Total:{total}</li>\r\n      <li className=\"statistics-item\">\r\n        Positive feedback:{positivePercentage}%\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Notification.css\";\r\n\r\nconst Notification = ({ message }) => (\r\n  <p className=\"notification-message\">{message}</p>\r\n);\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\r\nimport Section from \"../Section/Section\";\r\nimport Title from \"../Title/Title\";\r\nimport Button from \"../Button/Button\";\r\nimport Statistics from \"../Statistics/Statistics\";\r\nimport Notification from \"../Notification/Notification\";\r\n\r\nclass Fedback extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n    normal: 0,\r\n  };\r\n  buttonIncrement = (option) => {\r\n    this.setState((prevtState) => ({\r\n      [option]: prevtState[option] + 1,\r\n    }));\r\n    this.countTotalFeedback();\r\n    this.countPositiveFeedbackPercentage();\r\n  };\r\n  countTotalFeedback = () => {\r\n    this.setState((prevtState) => ({\r\n      total: prevtState.good + prevtState.neutral + prevtState.bad,\r\n    }));\r\n  };\r\n  countPositiveFeedbackPercentage = () => {\r\n    this.setState((prevtState) => ({\r\n      positivePercentage: Math.round(\r\n        (prevtState.good / prevtState.total) * 100\r\n      ),\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Section>\r\n        <Title message=\"Please leave feedback\" />\r\n        <Button\r\n          callback={this.buttonIncrement}\r\n          options={[\"good\", \"neutral\", \"bad\"]}\r\n        />\r\n        <h2>Statistics</h2>\r\n        {this.state.good === 0 &&\r\n        this.state.bad === 0 &&\r\n        this.state.neutral === 0 ? (\r\n          <Notification message=\"No feedback given\" />\r\n        ) : (\r\n          <Statistics\r\n            good={this.state.good}\r\n            neutral={this.state.neutral}\r\n            bad={this.state.bad}\r\n            total={this.state.total}\r\n            positivePercentage={this.state.positivePercentage}\r\n          />\r\n        )}\r\n      </Section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Fedback;\r\n","import React from \"react\";\r\n\r\nimport Fedback from \"./Components/Feedback/Feedback\";\r\nconst App = () => <Fedback />;\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n// class Counter extends React.Component {\n//   static defaultProps = {\n//     step: 1,\n//   };\n\n//   render() {\n//     const { step } = this.props;\n\n//     return (\n//       <div>\n//         <span>0</span>\n//         <button type=\"button\">Increment by {step}</button>\n//         <button type=\"button\">Decrement by {step}</button>\n//       </div>\n//     );\n//   }\n// }\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// ReactDOM.render(<Counter step={5} />, document.getElementById(\"root\"));\n"],"sourceRoot":""}